#!/bin/bash

set -e

readonly COMMANDS=(showthemes enabletheme disabletheme install uninstall help)
readonly USAGE="Usage: $(IFS=\|;echo "${COMMANDS[*]}")"
readonly THEMES=(dracula solarized)
readonly INSTALLED_DEFAULT_EL='/usr/local/share/emacs/site-lisp/default.el'
readonly ACTIVE_THEME_FILE='/etc/emacs-extras/active-theme.el'

function showactivetheme() {
  active_theme="$(cat "${ACTIVE_THEME_FILE}" | sed "s/(load-theme '//" | sed "s/ t)//")"
  echo "${active_theme}"
}

function showthemes() {
  active_theme="$(showactivetheme)"
  if [[ ! -z "${active_theme}" ]]; then
    echo "${active_theme} (active)"
  fi

  for theme in "${THEMES[@]}"; do
    [[ "${theme}" != "${active_theme}" ]] && echo "${theme}"
  done
}

function enabletheme() {
  if [[ -z "${2}" ]]; then
    >&2 echo "Error: No theme specified. Use 'showthemes' to get a list of installed themes."
    exit 1
  fi

  for theme in "${THEMES[@]}"; do
    if [[ "${2}" == "${theme}" ]]; then
      echo -e "(load-theme '${theme} t)" > ${ACTIVE_THEME_FILE}
      echo "${theme} enabled. Restart emacs for changes to take effect."
      return
    fi
  done

  >&2 echo "Error: Theme ${2} not recognized. Use 'showthemes' to get a list of installed themes."
  exit 1
}

function disabletheme() {
  active_theme="$(showactivetheme)"
  if [[ -z "${active_theme}" ]]; then
    >&2 echo 'Error: No theme is currently active.'
    exit 1
  fi

  echo "" > ${ACTIVE_THEME_FILE}
  echo "${active_theme} deactivated. Restart emacs for changes to take effect."
}

function install() {
  if [[ -e "${INSTALLED_DEFAULT_EL}" ]]; then
    echo "File already exists: ${INSTALLED_DEFAULT_EL}"
   exit 1
  fi

  ln -s /etc/emacs-extras/default.el "${INSTALLED_DEFAULT_EL}"
  touch "${ACTIVE_THEME_FILE}"
}

function uninstall() {
  if [[ -L "${INSTALLED_DEFAULT_EL}" ]]; then
    rm "${INSTALLED_DEFAULT_EL}"
  fi

  rm "${ACTIVE_THEME_FILE}"
}

for command in "${COMMANDS[@]}"; do
  if [[ "${1}" == "${command}" ]]; then
    "${command}" $@
    exit 0
  fi
done

echo "${USAGE}"
exit 1
